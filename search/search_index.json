{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A propos","text":""},{"location":"#francais","title":"Fran\u00e7ais","text":"<p>Je m'appelle Baptiste Langlade. Je suis un architecte logiciel bas\u00e9 en France.</p> <p>Vous trouverez sur ce site les vid\u00e9os des conf\u00e9rences que j'ai pu donn\u00e9 en fran\u00e7ais, ainsi que de rares articles.</p> <p>La majorit\u00e9 de mon travail Open Source se situe dans les organisations Innmind et Formal.</p> <p>Si vous souhaitez me contacter vous trouverez en pied de page mes r\u00e9seaux sociaux ou vous pouvez m'envoyer un mail \u00e0 ."},{"location":"#english","title":"English","text":"<p>My name is Baptiste Langlade. I'm a software architected located in France.</p> <p>You'll find on this website videos of talks I gave in french, and occasionally blog posts.</p> <p>Most of my Open Source work can be found in the Innmind and Formal organizations.</p> <p>If you want to contact me you'll find in the footer my social networks or you can email me at ."},{"location":"conferences/","title":"Conf\u00e9rences","text":""},{"location":"conferences/#et-si-le-futur-de-la-programmation-concurrentielle-avait-deja-50-ans","title":"Et si le futur de la programmation concurrentielle avait d\u00e9j\u00e0 50 ans ?","text":"<p>Vid\u00e9o non disponible pour le moment.</p> <p>Slides</p> Demo <p></p> <p>Code</p>"},{"location":"conferences/#archiver-efficacement-de-grands-volumes-de-donnees-grace-aux-monades","title":"Archiver efficacement de grands volumes de donn\u00e9es gr\u00e2ce aux monades","text":"<p>Vid\u00e9o non disponible pour le moment.</p> <p>Slides</p> Demo <p></p> <p>Code</p> Et si on repensait les ORMs ? <p></p> <p>Slides</p> Augmentez votre couverture : supprimez des tests ! <p></p> <p>Slides</p> Monades : paradigme unique pour la programation (a)synchrone <p></p> <ul> <li>Slides</li> <li>T\u00e9l\u00e9chargement</li> <li>Code</li> </ul> Les Exceptions : le trou dans la raquette du typage <p></p> <p>Slides</p> Du test \u00e0 la preuve : introduction au Property Based Testing <p></p> <ul> <li>Slides</li> <li>Code</li> </ul> Le temps : la d\u00e9pendance oubli\u00e9e <p></p> <p>Slides</p> La r\u00e9gulation de l\u2019activit\u00e9 d\u2019une application par hom\u00e9ostasie <p>Slides</p>"},{"location":"blog/","title":"Blog","text":"<p> RSS Feed</p>"},{"location":"blog/2023/09/composition-vs-h%C3%A9ritage/","title":"Composition vs H\u00e9ritage","text":"<p>Il y a quelques ann\u00e9es j'ai commenc\u00e9 \u00e0 me former \u00e0 la programmation fonctionnelle. Depuis j'utilise de plus en plus le principe de composition mais je ne me suis jamais formalis\u00e9 pourquoi.</p> <p>Cet article est ma tentative de condenser mes ann\u00e9es d'exp\u00e9rience sur ce sujet.</p>"},{"location":"blog/2023/09/composition-vs-h%C3%A9ritage/#heritage","title":"H\u00e9ritage","text":"<p>PHP comme beaucoup d'autres langages orient\u00e9s objet permet de faire de l'h\u00e9ritage. Le principe est qu'une classe (<code>B</code>) peut \u00e9tendre une autre classe (<code>A</code>). La classe enfante (<code>B</code>) expose \u00e0 un utilisateur toutes ses m\u00e9thodes <code>public</code> mais \u00e9galement celles de son parent (<code>A</code>). En interne <code>B</code> a acc\u00e8s \u00e0 toutes les m\u00e9thodes <code>public</code> et <code>protected</code> de <code>A</code>, elle peut soit les utiliser comme n'importe quelle m\u00e9thode d\u00e9finies dans <code>B</code> soit les r\u00e9implementer.</p> <p>Ce syst\u00e8me d'h\u00e9ritage est souvent enseign\u00e9 via l'exemple d'un <code>Chat</code> ou un <code>Chien</code> qui h\u00e9rite d'une classe <code>Animal</code>. Il montre comment r\u00e9utiliser les d\u00e9finitions (m\u00e9thodes ou propri\u00e9t\u00e9s) qui sont communes entre les chats et les chiens via une classe (souvent <code>abstract</code>) d\u00e9finissant un animal.</p> <p>D'un certains point de vue cet exercice est logique puisque les chats et les chiens sont bien des animaux. Mais il nous a surtout appris \u00e0 utiliser l'h\u00e9ritage pour r\u00e9utiliser du code. Dans nos applications on retrouve cette r\u00e9utilisation de code dans les services (les classes qui font des choses).</p> <p>Quand je r\u00e9fl\u00e9chis au syst\u00e8me d'h\u00e9ritage j'ai toujours l'exemple du package <code>innmind/http-transport</code> en t\u00eate. Il s'agit d'un client HTTP qui permet : - de faire des appels HTTP via cURL - de suivre les redirections HTTP - d'utiliser un Circuit Breaker - de faire de l'Exponential Backoff - de logguer les appels</p> <p>Un utilisateur pourrait vouloir agencer ces fonctionnalit\u00e9s de diff\u00e9rentes mani\u00e8res. Des exemples simples seraient soit le client cURL tout seul, logguer les appels, logguer les redirections, etc... (en pseudo-code cela ressemblerait \u00e0 <code>curl</code>, <code>log(curl)</code>, <code>redirection(log(curl))</code>, <code>log(redirection(curl))</code>, etc...).</p> <p>Lorsqu'une classe est charg\u00e9e en m\u00e9moire dans PHP elle ne peut plus changer. Pour offrir \u00e0 l'utilisateur toutes les possibilit\u00e9s d'usages il faudrait impl\u00e9menter toutes les chaines d'h\u00e9ritage (par exemple <code>LogRedirectionCurl</code> qui \u00e9tends <code>RedirectionCurl</code> qui \u00e9tend <code>Curl</code>).</p> <p>Sur ces 5 fonctionnalit\u00e9s on a <code>4!</code> permutations, soit <code>24</code> classes. Et si l'utilisateur souhaite rajouter une fonctionnalit\u00e9 alors l'ensemble des permutations est <code>5!</code>, soit <code>120</code> classes.</p> <p>Bien entendu l'ensemble des permutations n'est pas forc\u00e9ment utile. Mais le probl\u00e8me fondamentale de l'h\u00e9ritage ce situe ici de mon point de vue.</p> <p>Au plus vous essayez de faire coexister des fonctionnalit\u00e9s via de l'h\u00e9ritage au plus votre code devient complexe, et de mani\u00e8re exponentielle de surcroit.</p> <p>Apart\u00e9 : dans l'\u00e9cosyst\u00e8me PHP il est de plus en plus populaire d'utiliser des Traits pour \"composer\" des fonctionnalit\u00e9s. Cette approche n'a rien \u00e0 voir avec la composition et souffre des m\u00eames probl\u00e8mes que l'h\u00e9ritage (m\u00eame si amoindri, mais apporte aussi son lot d\u00e9di\u00e9 de probl\u00e8mes) puisque les permutations doivent \u00eatre fig\u00e9es dans une classe.</p>"},{"location":"blog/2023/09/composition-vs-h%C3%A9ritage/#composition","title":"Composition","text":"<p>La composition fait souvent r\u00e9f\u00e9rence \u00e0 la composition de fonctions en programmation fonctionnelle. En programmation objet, comme PHP, ce syst\u00e8me est connu sous le nom d'injection de d\u00e9pendances.</p> <p>L'objectif de cette approche est de cr\u00e9er des classes simples (ayant qu'une seule responsabilit\u00e9) et d'agencer les instances de ces classes localement en fonction du besoin.</p> <p>Si on reprend l'exemple du client HTTP introduit au dessus et qu'on souhaite utiliser diff\u00e9rentes permutations on obtient ce genre de code :</p> <pre><code>$logger = new Logger;\n$curl = new Curl;\n$logCurl = new Log($curl, $logger);\n$logRedirectionCurl = new Log(new Redirection($curl), $logger);\n// etc...\n</code></pre> <p>L\u00e0 o\u00f9 avec l'h\u00e9ritage on devait cr\u00e9er une classe pour une permutation, ici on ne fait que de l'injection d'objet dans d'autres objets. Et leur usage est interchangeable puisque les classes impl\u00e9mentent la m\u00eame interface.</p> <p>L'int\u00e9r\u00eat de cette approche est qu'il est tout \u00e0 fait possible d'utiliser partout dans l'application notre instance <code>$logCurl</code>, et vouloir suivre les redirections seulement \u00e0 un endroit de notre application. Par composition en faisant <code>new Redirection($logCurl)</code> \u00e0 l'endroit voulu on obtient l'effet souhait\u00e9 sans impacter le reste de l'application. A noter que cet exemple serait extr\u00eamement compliqu\u00e9 \u00e0 mettre en place via de l'h\u00e9ritage.</p> <p>L'utilisateur de ce syst\u00e8me est libre de rajouter une fonctionnalit\u00e9 sans avoir \u00e0 prendre en compte les autres fonctionnalit\u00e9s. Il y a donc moins de code et de tests \u00e0 \u00e9crire.</p> <p>L\u00e0 o\u00f9 une permutation des fonctionnalit\u00e9s n\u00e9cessite plusieurs classes via de l'h\u00e9ritage, avec la composition cela n\u00e9cessite la cr\u00e9ation d'un objet.</p>"},{"location":"blog/2023/09/composition-vs-h%C3%A9ritage/#solid","title":"SOLID","text":"<p>Cet acronyme repr\u00e9sente 5 principes de conceptions introduits par Robert C. Martin et sont des r\u00e9f\u00e9rences de la programmation objet.</p> <p>Dans le contexte de cet article les 2 premi\u00e8res lettres nous importent le plus : S pour Single responsibility principle et O pour Open/Closed principle.</p> <p>Single responsibility principle dit qu'une classe ne devrait faire qu'une seule chose.</p> <p>Hors l'h\u00e9ritage enfreind ce principe puisque comme d\u00e9montr\u00e9 au dessus la combinaison de fonctionnalit\u00e9s est repr\u00e9sent\u00e9e par une classe enfante qui essaie de faire plusieurs choses. A l'inverse la composition pousse dans cette direction pour permettre \u00e0 un utilisateur  d'agencer des objets au gr\u00e9 de ses besoins.</p> <p>Open/Closed principle dit qu'une classe devrait \u00eatre ouverte \u00e0 l'extension mais ferm\u00e9e \u00e0 la modification.</p> <p>L\u00e0 encore l'h\u00e9ritage enfreind ce principe puisqu'une classe enfante est libre de r\u00e9impl\u00e9menter une m\u00e9thode de la classe parente. Et une fois de plus la composition pousse dans cette direction via des classes simples et c'est \u00e0 l'utilisation des instances que l'utilisateur peut les agencer pour obtenir le comportement qu'il souhaite.</p>"},{"location":"blog/2023/09/composition-vs-h%C3%A9ritage/#final","title":"Final","text":"<p>En conclusion la diff\u00e9rence entre ces 2 approches pourrait se r\u00e9sumer via : - l'h\u00e9ritage en se voulant ouvert engendre une complexit\u00e9 croissante qui finit par fermer les possibilit\u00e9s, - la composition en utilisant des classes ferm\u00e9es garde une complexit\u00e9 constante et ouvre les possibilit\u00e9s.</p> <p>(Au passage, l'utilisation du mot cl\u00e9 <code>final</code> sur les classes est le meilleur moyen d'emp\u00eacher l'h\u00e9ritage et d'imposer la composition)</p>"},{"location":"blog/2014/02/shared-worker/","title":"Shared Worker","text":"<p>Last week I was thinking about one of my personal projects and what kind of evolution I could make. And a came across one requiring two browser tabs (on the same domain) to communicate with each other. And I remembered one article read long ago about shared web worker that could help me do that. I've spent the whole week trying to find this article and couldn't find it back. The only resources I did find was a short article on SitePoint dating back to 2011 and the specifications on whatwg.org.</p> <p>Another strange thing is the disappearance of the documention on the Mozilla Developper Network.</p> <p>So I decided to do an article on the subject with a use case and code examples.</p>"},{"location":"blog/2014/02/shared-worker/#definition","title":"Definition","text":"<p>First things first, what is a Shared Worker?</p> <p>It's an object you instanciate on your page, taking the path to a javascript file as first argument. It will execute the specified script in a separated thread and is aimed to process data without affecting the main thread (the one managing your page). You communicate between the threads through messages.</p> <p>Another key point is that every new instanciation on the same file will not create a new thread, but will connect to the first thread.</p> <pre><code>               _______  (Tab 1 thread)\n             /\n(Worker thread)\n             \\ _______  (Tab 2 thread)\n</code></pre> <p>If you don't see yet in what this is really cool, wait for the use case.</p> <p>So first let's look at how to instanciate a shared worker: <pre><code>var worker = new SharedWorker('shared-worker.js');\nworker.port.addEventListener('message', function (event) {\n    //here we listen all the messages the worker is sending to us\n},false);\nworker.port.start();\n</code></pre></p> <p>And the worker by itself looks like this: <pre><code>//shared-worker.js\nself.addEventListener('connect', function(event) {\n    var port = event.source;\n\n    port.addEventListener('message', function (messageEvent) {\n        //here we listen messages coming from the page thread\n    }, false);\n\n    port.start();\n}, false);\n</code></pre></p> <p>Before jumping to the use case, let's explain the code above.</p> <p>As you can see there's a lot of <code>port</code>, think of it as a connection. Remember, multiple pages can connect the same worker. So when you listen to events or send messages it's done on the <code>port</code> object.</p> <p>In the examples, I've shown 2 event names but there is a third named <code>close</code> and is only available in the worker. So in the order, we instanciate our worker, we define our messages listeners then say \"ok connect me to the worker\". This last one will trigger the <code>connect</code> event in the worker, in the listener we wait for messages that may come through this connections and finally says \"I'm ready too, let's do some work\". Now the threads can communicate with each other.</p> <p>The <code>close</code> event, not appearing in the code, remains really important. As the worker is only destroyed when all the tabs connected to the worker are closed, if you don't close properly the connection to the worker and reload your page and re-instanciate the worker, when it will post a message you will receive it twice and I'm sure you don't want that.</p> <p>So here's the code to close the connection: <pre><code>//in the page\nworker.port.close();\n</code></pre></p> <pre><code>//shared-worker.js\nvar ports = [];\nself.addEventListener('connect', function (event) {\n    var port = event.source;\n    ports.push(port);\n    //listen to messages...\n}.bind(self), false);\n\nself.addEventListener('close', function (event) {\n    var idx = ports.indexOf(event.source);\n    ports.slice(idx, idx);\n}.bind(self), false);\n</code></pre> <p>Above we keep the track of all the opened connections, and remove them when the <code>worker.port.close()</code> is called; you will in the use case why this is useful.</p>"},{"location":"blog/2014/02/shared-worker/#use-case","title":"Use case","text":"<p>So now that we know how it works and the basic codes, let's see in what it can be useful. For the example we will assume we have 2 web apps hosted on the same domain. The first is a project management app and the second one is about finance handling. As nowadays all apps are inter-connected, we want it too for our apps. So it be great if when we finish/start new tasks in the management app it's reported in the finance one.</p> <p>In general, the first thought is: let's do some ajax to send data and check if there's modification from the otherside.</p> <p>The main problem with this approach is that you need to communicate with the server. But as you're part of the cool kids, you've designed your app offline first and learned to build your apps without the need to rely on the server for everything. And this is where the SharedWorker help us do what required a server before; keeping the paradigm of offline first.</p> <p>With the worker you can transfer data between tabs only through javascript.</p> <p>Cool, but how do we do it?</p> <pre><code>//page1.js\nvar worker = new SharedWorker('shared-worker.js');\nworker.port.addEventListener('message', function (event) {\n\n    var source = event.data.source,\n        action = event.data.action;\n\n    if (action === 'data:request') {\n        this.postMessage({\n            source: 'page1',\n            action: 'data:request:answer',\n            dest: source,\n            data: retrieveLocallyStoredData()\n        });\n    }\n\n}.bind(worker.port), false);\nworker.port.start();\nworker.port.postMessage({\n    source: 'page1',\n    action: 'identification'\n});\n</code></pre> <pre><code>//page2.js\nvar worker = new SharedWorker('shared-worker.js');\nworker.port.addEventListener('message', function (event) {\n\n    var source = event.data.source,\n        action = event.data.action;\n\n    if (action === 'data:request:answer' &amp;&amp; source === 'page1') {\n        computeData(event.data.data);\n    }\n\n}.bind(worker.port), false);\nworker.port.start();\nworker.port.postMessage({\n    source: 'page2',\n    action: 'identification'\n});\nworker.port.postMessage({\n    source: 'page2',\n    action: 'data:request',\n    dest: 'page1'\n});\n</code></pre> <pre><code>//shared-worker.js\nvar ports = [],\n    identities = {};\n\nself.addEventListener('connect', function (event) {\n    var port = event.source;\n\n    ports.push(port);\n\n    port.addEventListener('message', function (e) {\n\n        if (e.data.action === 'identification') {\n            identities[e.data.source] = ports.indexOf(port);\n        }\n\n        if (\n            e.data.source &amp;&amp;\n            e.data.dest &amp;&amp;\n            e.data.action\n        ) {\n            ports[identities[e.data.dest]].postMessage(e.data);\n        }\n\n    }.bind(this), false);\n\n    port.start();\n}.bind(self), false);\n\nself.addEventListener('close', function (event) {\n    var idx = ports.indexOf(event.source);\n\n    //keeps in sync source name and index\n    for (var source in identities) {\n        if (identities.hasOwnProperty(source)) {\n            if (identities[source] === idx) {\n                delete identities[source];\n            } else if (identities[source] &gt; idx) {\n                identities[source]--;\n            }\n        }\n    }\n\n    ports.slice(idx, idx);\n\n}.bind(self), false);\n</code></pre> <p>So lots of code here, I'll explain what it does.</p> <p>In both pages we instanciate our worker and identify themselves via the first <code>postMessage</code>. By default the API does not allow us to name the different connections, so this is how I found to do it so far.</p> <p>In the first page we listen messages coming from the worker and if the action is <code>data:request</code>, we send back to the source the data of our app. In the second one, we send our data request to the other page and listen to the response.</p> <p>The code of the worker is mainly boilerplate code to setup named ports. Then it only comes down to the check on <code>source</code>, <code>dest</code> and <code>action</code> attributes on the message event data; if there are all available, we post the message data to the appropriate port. Simple as that.</p> <p>With not that much of code you can setup directional communication between tabs/apps, and is extensible to as many sources that you want. However the code above does not cover the case where the user open the same app in multiple tabs, it would break the mechanism of identification. But it could be a good way to check if the user launched the same app twice, in the identification code in the worker if we see a source is already defined with the same name, we post a message back and alert the user to only use one instance of the app (and don't forget to remove the port from the <code>ports</code> array).</p>"},{"location":"blog/2014/02/shared-worker/#sugar","title":"Sugar","text":"<p>A nice improvement we could do in the worker would be to introduce a data transformer, so we could adapt the data structure depending on which source is requesting it. It would really help keep as much as possible agnostics the apps from one another.</p> <p>But as we can only specify one file for a worker, it wouldn't be really easy to put complex data manipulation into this single file. Especially if the number of apps communicating starts growing.</p> <p>But don't be afraid, there's a function to help us and it's called <code>importScripts</code>. In a page you add your scripts via the <code>script</code> tag, in the worker it's done through this function. You pass one or multiple files as arguments, and you can call the function as many times you want.</p> <pre><code>importScripts('file1.js');\nimportScripts('file2.js', 'fileX.js');\n</code></pre>"},{"location":"blog/2014/02/shared-worker/#restrictions","title":"Restrictions","text":"<p>To prevent concurrency conflicts, the worker can access to only a few objects from the main thread.</p> <ul> <li><code>navigator</code></li> <li><code>location</code> (read-only)</li> <li><code>XMLHttpRequest</code></li> </ul> <p><code>window</code>, <code>document</code>, <code>parent</code> and the DOM are NOT accessible inside the browser.</p> <p>The worker file, and files loaded inside it, must be on the same domain and respect the same scheme (http or https) as the page instanciating it.</p>"},{"location":"blog/2014/02/shared-worker/#conclusion","title":"Conclusion","text":"<p>Some last words on the subject, I hope I helped you understand what kind of stuff you can do with Shared Workers and raised some ideas in your minds.</p> <p>The only problem I encountered was the debug part, Chrome Dev Tools allows to debug workers but not shared ones. So if someone knows how to do it, please leave a comment on the issue related to this article, thanks.</p> <p>And for browser compatibility, please refer to our dearest friend: caniuse.com. Unfortunately, it's pretty limited right now.</p>"},{"location":"blog/2014/07/why-i-hate-to-rebase/","title":"Why I hate to rebase","text":"<p>Before jumping right to the point I want to make, just step back and think about what's the purpose of the VCS and why <code>git rebase</code> seems a good tool.</p>"},{"location":"blog/2014/07/why-i-hate-to-rebase/#goal-of-a-vcs","title":"Goal of a VCS","text":"<p>We mainly use such tools to improve the collaborative work. But I see it more as the single point of truth for the projects. After all if those systems register all the things we do on code, it's to keep track on what's exactly happening on the code.</p> <p>That's why I don't like any tool that have a destructive effect on the repositories. Because it means you're lying to the repo. And I can't see in any way how lying to the system supposed to tell the only truth can benefit you or your teammates.</p>"},{"location":"blog/2014/07/why-i-hate-to-rebase/#seems-practical","title":"Seems practical","text":"<p>Even though I never liked to rebase, I tried to listen to those whom are using it. The most common answer was: it helps you keep your commit history straight without plenty of merge commit.</p> <p>Well, it's right, with the <code>rebase</code> you don't have a merge commit each time you want to update your branch with another one. (But, it's your first lie to the repo, as you say that you started your work from a new commit than the real one)</p> <p>Another answer was as we rebase, when you want to merge to the source branch you simply have a fast forward, and so a straight line; consequently it's easier when looking back to the history, you don't have to understand the subway map. (But still, you're looking at a bunch of lies) Each time I hear someone tell me it's good to have just one line of history, I have the feeling he tries to use git like it was SVN. If git has a good branching mechanism, why someone would want to use git as if there were no branches?!</p>"},{"location":"blog/2014/07/why-i-hate-to-rebase/#it-will-bite-you","title":"It will bite you","text":"<p>The points above can be debatable and some will disagree (which is normal). But I recently had good examples of how the rebase came back to bite me; that's what really motivated me to write this little article.</p> <p>The first example concerns 2 teammates, 2 branches and a common one. These coworkers were working on related features but decided to use different branches. Each one produced some code, and then one (he doesn't know that much about git) asked me how to incorporate part of the code of the other developer into his branch. In a normal case I would have done a simple merge, but as I never came across the context where we mix rebases and merges, I didn't know how git would behave afterward with other rebases on top of the merge. I was a bit afraid git would throw an error as he couldn't link to the merge parent commit; and I didn't want to mess up with his work. So I played it safe by cherry-picking the code of the other developer into his branch (thankfully it was limited to one commit).</p> <p>Afterward I decided to do a little test to see how git behave if I would have done a merge to resolve this example. And it appears git is smart enough that rebasing after a merge keeps the commits whithout breaking, but it removes the merge commit. Which, in my opinion, is bad. Remember what's the goal of the vcs? Keep track of what's happening! But here, on top of the rebase lies, we had another one by removing the fact we merged the work of someone else into our branch.</p> <p>The second example has gone hard on my nerves. I was working on a new feature on my own branch, everything was working fine. To keep up with the common branch, to be sure there was no conflicts, I rebased several times (as it's how the team works). And then I deployed my work on a sandbox server to test all my work, and saw that part of my code that was working fine was now broken (even if I didn't change any line of code).</p> <p>In a normal case (meaning merges instead of rebases), I would have gone for <code>git bisect</code> to find the faulty commit, which would have taken approximatively 5 minutes. But here it's of no help, as I'm sure it was the code made on the common branch that was breaking my code. And as I rebased, the code made by my colleagues are now behind of my work instead of being in parallel in the commit history. So the bisect wouldn't work as know even the point were my code was working it's now failing, and the faulty commit is now in a place were my work is not existing.</p> <p>Example with merge: <pre><code> A\n |\\\n | \\\n B  |\n |  C  &lt;- working commit\n |  |\n  \\ |\n    D  &lt;- faulty commit that could be found via `bisect`\n    |\n    |\n    E  &lt;- failing commit\n</code></pre></p> <p>Example with rebase: <pre><code> A\n |\n |\n B  &lt;- faulty commit\n  \\\n   \\\n    C  &lt;- working commit before rebase (now failing)\n    |\n    |\n    D  &lt;- failing commit (as created after the rebase)\n</code></pre></p> <p>In this last example, you can't determine easily where it has gone wrong as know <code>C</code> is the child of a failing commit, but previously it was the child of a working one. Here, it's simple to determine what happened as there's only 4 commits, but imagine if you have hundreds of them.</p> <p>In result of this second example, I've lost almost a full day to figure out what was going on; before to find a teammate had updated all the dependencies of the application, that introduce a parallel code which was modifying the data after the execution of my code (code that was not even directly related to mine).</p>"},{"location":"blog/2014/07/why-i-hate-to-rebase/#conclusion","title":"Conclusion","text":"<p>Tools such as <code>rebase</code> seems to help you keep things simple on your repo (history more readable, etc...), but once again the goal of the vcs is keep track of what's happening. In most cases you won't notice modifying the commit history is a bad habit, but the day you'll really need to look back at what happened, you won't be able (at least easily) to figure out what happened and in which order.</p>"},{"location":"blog/2014/04/yet-another-framework/","title":"Yet another framework","text":"<p>Yesterday I finally merged my last 6 months (not full time) of work on my framework to <code>master</code>, releasing the first version <code>0.5.0</code>. In this article I want to explain why I started this project.</p>"},{"location":"blog/2014/04/yet-another-framework/#origin","title":"Origin","text":"<p>I want to start at the very beginning. More than a year ago I started a project management tool fully written in javascript to replace a discontinued tool named Wunderkit. It was also a time I learned to write javascript so it was a good opportunity to improve my skills on this language.</p> <p>As I wanted to really know how javascript was working I did this project in vanilla js. I worked on it for about one year and I've rewritten the app 3 times as I was never really satisfied how the code was structured.</p> <p>In the meantime, I discovered the backend framework Symfony2 to build the website/api for my project. Working with it was an eye opener to a lot of design patterns and how different components are working together inside a unique framework. And I felt like: \"Where the hell is a framework like this for javascript?\".</p> <p>So I searched for frameworks to build my project upon. In the end the sole one close enough was angular (no need to introduce it I hope). I liked the fact there are a mechanism for services and that it encourages you to use them.</p> <p>But I was still missing the clear code structure and organisation I was familiar with Symfony. So here's how and why I started this project: to reproduce the same kind of framework as Symfony but in javascript.</p>"},{"location":"blog/2014/04/yet-another-framework/#principles","title":"Principles","text":"<p>The main problem I encountered when looking to other frameworks was the hole integretaed thing. You can't really reuse part of the framework outside it, that's the first thing that bugged me up and I didn't want that for this project. So I started to work like I was building different libraries with no relation between them and glue them up when there're all ready (same thing is done with Symfony).</p> <p>So all the libraries in Sy can be reused outside out the framework: Configurator, HTTP wrapper, Mediator, Logger, Generator, Registry, StateRegistry, Service container, Storage mechanism, Translator and View mechanism (and this should be just the start :)). Each one of them has it's own documentation in the framework repository.</p> <p>The other that I really didn't like with all other frameworks was that you never now (and nobody tells it) where you need to put the instances of your main objects. I've seen controller instances put in the global scopes, or each time you want to instanciate a top object you do it in a closure.</p> <p>With Sy it's simple, you don't have to wonder about it, the framework takes care of it. Because it impose you a clear code structure in where you need to put your classes, the framework can determine where to find what it needs and instanciate in an internal object a new instance of a controller for example. In the end, you only define your classes in the <code>App</code> global object (and sub-objects) and the framework will create the instances when needed. No need to wonder if some some code will override a variable in another file, or to loose performance by using to much closures.</p> <p>Another point I wanted for this project was about performance. Nowadays end user don't see performance (ui responsiveness, etc...) as a plus in your app, but it's now a key feature. That's why all the code written in Sy is here to help you reduce the need of closures. Most of the javascript I read in my work rely (way too much) on them, because it's easy it doesn't it's good. I remember a while back watching a Google I/O event about how to optimize code for V8, there was a part about the garbage collection and how it worked; that day I realized how closures can become a hell to the GC when looking for objects to be destroyed and how it could impact the performance (there's also a google doc on js optimizations). So if you look at the core code of my framework you'll see almost no closure, in fact it's quite easy to avoid them.</p> <p>The last point is about reading code, I wanted to keep things simple as if there were no framework at all. I wanted to lower the learning curve when reading code built upon Sy and feel like it's just vanilla javascript. When I look at the code now, I feel like homemade code using external libraries to abstract some work. I didn't want to first understand framework's principles before understanding the real code in front of me. And I hope you'll have this feeling too. Plus, with the code structure imposed you know what's where, don't need to search where some code could be located.</p>"},{"location":"blog/2014/04/yet-another-framework/#conclusion","title":"Conclusion","text":"<p>So to resume a bit, I'm building this framework to give you guys a good code structure using known design patterns. But at the same time leave things simple by letting you have the feeling you're writing vanilla js.</p> <p>I hope I'm on the good path to accomplish this, and you'll like this approach too.</p> <p>Feel free to express your thoughts on this subject in the associated issue.</p>"},{"location":"conferences/actor%20model/slides/","title":"Slides","text":""},{"location":"conferences/actor%20model/slides/#et-si-le-futur-de-la-programmation-concurrentielle-avait-deja-50-ans","title":"Et si le futur de la programmation concurrentielle avait d\u00e9j\u00e0 50 ans ?","text":"<p>[.list: alignment(left)]</p> <ul> <li>Baptiste Langlade</li> <li>Architecte chez Efalia</li> <li>Lyon</li> <li>10+ ans XP</li> <li>~100 packages Open Source</li> </ul>"},{"location":"conferences/actor%20model/slides/#crawler","title":"Crawler","text":"<pre><code>flowchart TB\n    start[\"wikipedia.org\"]\n    start --&gt; en[\"en.wikipedia.org\"]\n    start --&gt; fr[\"fr.wikipedia.org\"]\n    en --&gt; php[\"en.wikipedia.org/wiki/PHP\"]\n    en --&gt; etc[\"etc...\"]\n    fr --&gt; php_fr[\"fr.wikipedia.org/wiki/PHP\"]\n    fr --&gt; etc_fr[\"etc...\"]\n</code></pre> <pre><code>flowchart BT\n    subgraph rabbitmq [\"RabbitMQ\"]\n        queue[\"Queue messages\"]\n    end\n    c1 -- Pull --&gt; queue\n    subgraph p1 [\"Process 1\"]\n        c1[\"Consumer 1\"]\n    end\n</code></pre> <p>[.code-highlight: 3-9] [.code-highlight: 4] [.code-highlight: 5] [.code-highlight: 6-8] [.code-highlight: 1-2, 10-11]</p> <pre><code>$rabbitmq\n    -&gt;with(Consume::of('queue')-&gt;handle(\n        static function(Message $message) use ($rabbitmq) {\n            $url = decodeUrl($message);\n            $urls = crawl($url);\n            $rabbitmq\n                -&gt;with(Publish::many($urls)-&gt;to('queue'))\n                -&gt;run();\n        },\n    ))\n    -&gt;run();\n</code></pre> <pre><code>flowchart TB\n    subgraph queue [\"Queue\"]\n        m1[\"wikipedia.org\"] --&gt; m2[\"en.wikipedia.org\"] --&gt; m3[\"fr.wikipedia.org\"]\n        m3 --&gt; m4[\"en.wikipedia.org/wiki/PHP\"] --&gt; etc[\"etc...\"]\n    end\n</code></pre>"},{"location":"conferences/actor%20model/slides/#simple-mais-inefficace","title":"Simple mais inefficace","text":"<p>^ simple au raisonnement mais inefficace</p>"},{"location":"conferences/actor%20model/slides/#parallelisation","title":"Parall\u00e9lisation","text":"<pre><code>flowchart BT\n    subgraph rabbitmq [\"RabbitMQ\"]\n        queue[\"Queue messages\"]\n    end\n    c1 -- Pull --&gt; queue\n    c2 -- Pull --&gt; queue\n    subgraph p1 [\"Process 1\"]\n        c1[\"Consumer 1\"]\n    end\n    subgraph p2 [\"Process 2\"]\n        c2[\"Consumer 2\"]\n    end\n</code></pre> <p>^ synchronisation problem</p> <pre><code>php consumer.php &amp; php consumer.php &amp;\n</code></pre>"},{"location":"conferences/actor%20model/slides/#robotstxt","title":"<code>robots.txt</code>","text":"<p>[.code-highlight: 1-3] [.code-highlight: 4]</p> <pre><code>User-agent : Googlebot\nAllow : /foo\nDisallow : /bar\nCrawl-delay : 10\n</code></pre> <pre><code>flowchart BT\n    subgraph rabbitmq [\"RabbitMQ\"]\n        queue[\"Queue messages\"]\n    end\n    c1 -- Pull --&gt; queue\n    c2 -- Pull --&gt; queue\n    subgraph p1 [\"Process 1\"]\n        c1[\"Consumer 1\"]\n    end\n    subgraph p2 [\"Process 2\"]\n        c2[\"Consumer 2\"]\n    end\n    subgraph filesystem [\"Filesystem\"]\n        lock[\"Lock\"]\n    end\n    c1 -- Acquire --&gt; lock\n    c2 -- Acquire --&gt; lock\n</code></pre> <p>^ noisy neighbour: un consumer peut emp\u00eacher les autres de run</p> <p>[.code-highlight: 6]</p> <pre><code>$rabbitmq\n    -&gt;with(Consume::of('queue')-&gt;handle(\n        static function(Message $message) use ($rabbitmq) {\n            $url = decodeUrl($message);\n\n            lock($url); // appel bloquant\n\n            $urls = crawl($url);\n            $rabbitmq\n                -&gt;with(Publish::many($urls)-&gt;to('queue'))\n                -&gt;run();\n        },\n    ))\n    -&gt;run();\n</code></pre>"},{"location":"conferences/actor%20model/slides/#partitionnement-sharding","title":"Partitionnement / Sharding","text":"<pre><code>flowchart BT\n    subgraph rabbitmq [\"RabbitMQ\"]\n        q1[\"Queue 1\"]\n        q2[\"Queue 2\"]\n    end\n    c1 -- Pull --&gt; q1\n    c2 -- Pull --&gt; q2\n    subgraph p1 [\"Process 1\"]\n        c1[\"Consumer 1\"]\n    end\n    subgraph p2 [\"Process 2\"]\n        c2[\"Consumer 2\"]\n    end\n</code></pre> <p>[.code-highlight: 5-11]</p> <pre><code>$rabbitmq\n    -&gt;with(Consume::of('queue')-&gt;handle(\n        static function(Message $message) use ($rabbitmq) {\n            $url = decodeUrl($message);\n            $urls = crawl($url);\n            $fr = $urls-&gt;filter(isDotFr(...));\n            $org = $urls-&gt;filter(isDotOrg(...));\n            $rabbitmq\n                -&gt;with(Publish::many($fr)-&gt;to('queue1'))\n                -&gt;with(Publish::many($org)-&gt;to('queue2'))\n                -&gt;run();\n        },\n    ))\n    -&gt;run();\n</code></pre> <p>^ probl\u00e8me un consumer peut \u00eatre plus actif qu'un autre</p> <pre><code>flowchart BT\n    subgraph rabbitmq [\"RabbitMQ\"]\n        q1[\"Queue 1\"]\n        q2[\"Queue 2\"]\n    end\n    c1 -- Pull --&gt; q1\n    c2 -- Pull --&gt; q1\n    c3 -- Pull --&gt; q2\n    c4 -- Pull --&gt; q2\n    subgraph p1 [\"Process 1\"]\n        c1[\"Consumer 1\"]\n    end\n    subgraph p2 [\"Process 2\"]\n        c2[\"Consumer 2\"]\n    end\n    subgraph p3 [\"Process 3\"]\n        c3[\"Consumer 3\"]\n    end\n    subgraph p4 [\"Process 4\"]\n        c4[\"Consumer 4\"]\n    end\n    subgraph filesystem [\"Filesystem\"]\n        l1[\"Lock 1\"]\n        l2[\"Lock 2\"]\n    end\n    c1 -- Acquire --&gt; l1\n    c2 -- Acquire --&gt; l1\n    c3 -- Acquire --&gt; l2\n    c4 -- Acquire --&gt; l2\n</code></pre>"},{"location":"conferences/actor%20model/slides/#complexite-exponentielle","title":"Complexit\u00e9 exponentielle","text":"<p>^ au plus on veut optimiser les ressources au plus la complexit\u00e9 croit</p>"},{"location":"conferences/actor%20model/slides/#probleme-insoluble","title":"Probl\u00e8me insoluble ?","text":"<p>^ probl\u00e8me valable pour des imports, webhooks, syncro de syst\u00e8mes, etc...; probl\u00e8me de logique</p>"},{"location":"conferences/actor%20model/slides/#actor-model","title":"Actor Model","text":"<p>^ 1973 par Carl Hewitt, pb concurrence =&gt; supprimer concurrence</p> <p>[.list: alignment(left)]</p>"},{"location":"conferences/actor%20model/slides/#actor","title":"Actor","text":"<ul> <li>Traite une file de messages</li> <li>Peut cr\u00e9er d'autres acteurs</li> <li>Peut envoyer des messages aux autres acteurs</li> </ul> <p>^ ~= 1 process, 1 message \u00e0 la fois</p> <pre><code>flowchart TB\n    subgraph pr[\"Process\"]\n        ar[\"Actor 'Crawler'\"]\n        ar -. Messages .-&gt; ar\n    end\n    m0(\"First message\") -..-&gt; pr\n</code></pre> <pre><code>flowchart TB\n    subgraph pr[\"Process\"]\n        ar[\"Actor 'Crawler'\"] -. Messages .-&gt; mr[\"Mailbox\"]\n        mr --&gt; ar\n    end\n    m0(\"First message\") -..-&gt; pr\n</code></pre> <p>[.code-highlight: 1] [.code-highlight: 3] [.code-highlight: 5-6] [.code-highlight: 7-15]</p> <pre><code>final class Crawler implements Actor\n{\n    public function __invoke(Receive $receive): Receive\n    {\n        return $receive-&gt;on(\n            Url::class,\n            function(\n                Url $url,\n                Address $sender,\n                Continuation $continuation,\n            ) {\n                $urls = crawl($url);\n\n                return $continuation-&gt;continue($urls);\n            },\n        );\n    }\n}\n</code></pre> <p>[.code-highlight: 1] [.code-highlight: 2-5] [.code-highlight: 6-9]</p> <pre><code>System::of()\n    -&gt;actor(\n        Crawler::class,\n        static fn() =&gt; new Crawler,\n    )\n    -&gt;run(\n        Crawler::class,\n        Url::of('https://wikipedia.org'),\n    );\n</code></pre> <pre><code>flowchart TB\n    subgraph pr [\"Process 0\"]\n        arm[\"Mailbox\"] --&gt; ar[\"Root actor\"]\n    end\n    subgraph p1 [\"Process 1\"]\n        a1m[\"Mailbox\"] --&gt; a1[\"Actor '.org'\"]\n    end\n    subgraph p2 [\"Process 2\"]\n        a2m[\"Mailbox\"] --&gt; a2[\"Actor '.fr'\"]\n    end\n    subgraph p3 [\"Process 3\"]\n        a3m[\"Mailbox\"] --&gt; a3[\"Actor 'wikipedia.org'\"]\n    end\n    subgraph p4 [\"Process 4\"]\n        a4m[\"Mailbox\"] --&gt; a4[\"Actor 'linuxfoundation.org'\"]\n    end\n    subgraph p5 [\"Process 5\"]\n        a5m[\"Mailbox\"] --&gt; a5[\"Actor 'wikipedia.fr'\"]\n    end\n    subgraph p6 [\"Process 6\"]\n        a6m[\"Mailbox\"] --&gt; a6[\"etc...\"]\n    end\n    ar -. Messages .-&gt; p1\n    ar -. Messages .-&gt; p2\n    p1 -. Messages .-&gt; p3\n    p1 -. Messages .-&gt; p4\n    p2 -. Messages .-&gt; p5\n    p2 -. Messages .-&gt; p6\n    m0(\"First message\") -..-&gt; pr\n</code></pre> <p>^ actors come in systems alias diviser pour mieux r\u00e9gner, addresses as messages</p> <p>[.code-highlight: 6] [.code-highlight: 15] [.code-highlight: 16-18] [.code-highlight: 3-4] [.code-highlight: 20]</p> <pre><code>final class Crawler implements Actor\n{\n    /** @var array&lt;string, Address&gt; */\n    private array $tlds;\n\n    public function __construct(private Spawn $spawn)\n    {\n    }\n\n    public function __invoke(Receive $receive): Receive\n    {\n        return $receive-&gt;on(\n            Url::class,\n            function(Url $url, Address $sender, Continuation $continuation) {\n                $tld = $url-&gt;tld();\n                $child = $this-&gt;tlds[$tld] ??= ($this-&gt;spawn)(\n                    ChildCrawler::class,\n                );\n\n                $child($url);\n\n                return $continuation-&gt;continue();\n            },\n        );\n    }\n}\n</code></pre> <p>[.code-highlight: 1] [.code-highlight: 5-6] [.code-highlight: 8-10] [.code-highlight: 7]</p> <pre><code>final class ChildCrawler implements Actor\n{\n    public function __invoke(Receive $receive): Receive\n    {\n        return $receive-&gt;on(\n            Url::class,\n            function(Url $url, Address $sender, Continuation $continuation) {\n                $urls = crawl($url);\n                $urls-&gt;foreach(static fn($url) =&gt; $sender($url));\n\n                return $continuation-&gt;continue();\n            },\n        );\n    }\n}\n</code></pre> <p>[.code-highlight: 4] [.code-highlight: 6-9]</p> <pre><code>System::of()\n    -&gt;actor(\n        Crawler::class,\n        static fn($_, $__, Spawn $spawn) =&gt; new Crawler($spawn),\n    )\n    -&gt;actor(\n        ChildCrawler::class,\n        static fn() =&gt; new ChildCrawler,\n    )\n    -&gt;run(\n        Crawler::class,\n        Url::of('https://wikipedia.org'),\n    );\n</code></pre>"},{"location":"conferences/actor%20model/slides/#en-pratique-ca-donne-quoi","title":"En pratique \u00e7a donne quoi ?","text":"<p>^ simple et scalable, pause</p> Actor Model RabbitMQ Mailbox Queue Actor Consumer <pre><code>flowchart TB\n    subgraph rabbit[\"RabbitMQ\"]\n        q1[\"Queue '.org'\"]\n        q2[\"Queue '.fr'\"]\n        q3[\"Queue 'wikipedia.org'\"]\n        q4[\"etc...\"]\n    end\n    subgraph s[\"Server\"]\n        subgraph p4[\"Process 4\"]\n            c4[\"Consumer\"]\n        end\n        subgraph p3[\"Process 3\"]\n            c3[\"Consumer\"]\n        end\n        subgraph p2[\"Process 2\"]\n            c2[\"Consumer\"]\n        end\n        subgraph p1[\"Process 1\"]\n            c1[\"Consumer\"]\n        end\n    end\n    q1 -. Messages .-&gt; p1\n    q2 -. Messages .-&gt; p2\n    q3 -. Messages .-&gt; p3\n    q4 -. Messages .-&gt; p4\n</code></pre>"},{"location":"conferences/actor%20model/slides/#probleme-de-ressources","title":"Probl\u00e8me de ressources ?","text":"<p>^ process !== process syst\u00e8me</p>"},{"location":"conferences/actor%20model/slides/#parallelisation-asynchrone","title":"Parall\u00e9lisation + Asynchrone","text":"<p>^ cpu bound \ud83d\udc4d</p> <p></p> <p>^ IO bound \ud83d\udc4d</p> <p></p> <pre><code>flowchart TB\n    subgraph rabbit[\"RabbitMQ\"]\n        q1[\"Queue '.org'\"]\n        q2[\"Queue '.fr'\"]\n        q3[\"Queue 'wikipedia.org'\"]\n        q4[\"etc...\"]\n    end\n    subgraph s[\"Server\"]\n        subgraph p2[\"Process 2\"]\n            c3[\"Consumer\"]\n            c4[\"Consumer\"]\n        end\n        subgraph p1[\"Process 1\"]\n            c1[\"Consumer\"]\n            c2[\"Consumer\"]\n        end\n    end\n    q1 -. Messages .-&gt; c1\n    q2 -. Messages .-&gt; c2\n    q3 -. Messages .-&gt; c3\n    q4 -. Messages .-&gt; c4\n</code></pre> <pre><code>flowchart TB\n    subgraph rabbit[\"RabbitMQ\"]\n        q1[\"Queue '.org'\"]\n        q2[\"Queue '.fr'\"]\n        q3[\"Queue 'wikipedia.org'\"]\n        q4[\"etc...\"]\n    end\n    subgraph s2[\"Server 2\"]\n        subgraph p2[\"Process 2\"]\n            c3[\"Consumer\"]\n            c4[\"Consumer\"]\n        end\n    end\n    subgraph s1[\"Server 1\"]\n        subgraph p1[\"Process 1\"]\n            c1[\"Consumer\"]\n            c2[\"Consumer\"]\n        end\n    end\n    q1 -. Messages .-&gt; c1\n    q2 -. Messages .-&gt; c2\n    q3 -. Messages .-&gt; c3\n    q4 -. Messages .-&gt; c4\n</code></pre>"},{"location":"conferences/actor%20model/slides/#avantages","title":"Avantages","text":""},{"location":"conferences/actor%20model/slides/#scalabilite-infinie","title":"Scalabilit\u00e9 infinie","text":"<p>^ single process -&gt; multi process -&gt; cluster, WhatsApp, RabbitMQ</p>"},{"location":"conferences/actor%20model/slides/#resilience","title":"R\u00e9silience","text":"<p>^ gestion des erreurs</p>"},{"location":"conferences/actor%20model/slides/#deploiement-progressif","title":"D\u00e9ploiement progressif","text":""},{"location":"conferences/actor%20model/slides/#unifier-des-paradigmes-differents","title":"Unifier des paradigmes diff\u00e9rents","text":"<p>^ un actor ne devrait pas savoir s'il est ex\u00e9cut\u00e9 en async ou pas, utile pour les tests</p> <p></p>"},{"location":"conferences/actor%20model/slides/#httpsinnmindorg","title":"https://innmind.org","text":""},{"location":"conferences/actor%20model/slides/#monades","title":"Monades","text":""},{"location":"conferences/actor%20model/slides/#tests","title":"Tests","text":"<p>^ PBT async, blackbox</p> <p></p>"},{"location":"conferences/actor%20model/slides/#demo","title":"Demo","text":""},{"location":"conferences/actor%20model/slides/#httpsgithubcominnmindactors","title":"\ud83d\udea7 https://github.com/innmind/actors \ud83d\udea7","text":""},{"location":"conferences/actor%20model/slides/#questions","title":"Questions","text":"<p>X/Bluesky/Mastodon @Baptouuuu</p> <p>https://baptouuuu.github.io/conferences/</p>"},{"location":"conferences/homeostasis/plugin/markdown/example/","title":"Markdown Demo","text":""},{"location":"conferences/homeostasis/plugin/markdown/example/#external-11","title":"External 1.1","text":"<p>Content 1.1</p> <p>Note: This will only appear in the speaker notes window.</p>"},{"location":"conferences/homeostasis/plugin/markdown/example/#external-12","title":"External 1.2","text":"<p>Content 1.2</p>"},{"location":"conferences/homeostasis/plugin/markdown/example/#external-2","title":"External 2","text":"<p>Content 2.1</p>"},{"location":"conferences/homeostasis/plugin/markdown/example/#external-31","title":"External 3.1","text":"<p>Content 3.1</p>"},{"location":"conferences/homeostasis/plugin/markdown/example/#external-32","title":"External 3.2","text":"<p>Content 3.2</p>"},{"location":"conferences/orm/slides/","title":"Slides","text":""},{"location":"conferences/orm/slides/#et-si-on-repensait-les-orms","title":"Et si on repensait les ORMs ?","text":"<p>[.list: alignment(left)]</p> <ul> <li>Baptiste Langlade</li> <li>Architecte chez Efalia</li> <li>Lyon</li> <li>~95 packages Open Source</li> <li>10+ ans XP</li> </ul>"},{"location":"conferences/orm/slides/#domain-driven-design","title":"Domain Driven Design","text":"<p>^ r\u00e9soud probl\u00e8mes maintenance</p> <p>Une <code>Voiture</code> a une <code>CarteGrise</code></p> <p>^ la carte ne peut pas \u00eatre partag\u00e9e</p> <pre><code>class Voiture\n{\n    public function __construct(\n        private Id $id,\n        private CarteGrise $carteGrise,\n    ) {}\n}\n\nclass CarteGrise\n{\n    public function __construct(\n        private string $immatriculation,\n        private string $proprietaire,\n        private string $adresse,\n    ) {}\n}\n</code></pre> <p>[.code-highlight: 3, 12]</p> <pre><code>class Voiture\n{\n    private int $id;\n\n    public function __construct(\n        private CarteGrise $carteGrise,\n    ) {}\n}\n\nclass CarteGrise\n{\n    private int $id;\n\n    public function __construct(\n        private string $immatriculation,\n        private string $proprietaire,\n        private string $adresse,\n    ) {}\n}\n</code></pre> <p>^ probl\u00e8me : chaque objet est oblig\u00e9 d'avoir un id pour identifier la ligne en bdd</p> <p>[.code-highlight: 6]</p> <pre><code>class Voiture\n{\n    private int $id;\n\n    public function __construct(\n        private CarteGrise $carteGrise,\n    ) {}\n}\n\nclass CarteGrise\n{\n    private int $id;\n\n    public function __construct(\n        private string $immatriculation,\n        private string $proprietaire,\n        private string $adresse,\n    ) {}\n}\n</code></pre> <p>^ probl\u00e8me : carte grise peut \u00eatre partag\u00e9e</p> <p>[.code-highlight: 4, 7-9, 11, 20]</p> <pre><code>class Voiture\n{\n    private int $id;\n    private CarteGrise $carteGrise;\n\n    public function __construct(\n        string $immatriculation,\n        string $proprietaire,\n        string $adresse,\n    ) {\n        $this-&gt;carteGrise = new CarteGrise($this, $immatriculation, $proprietaire, $adresse);\n    }\n}\n\nclass CarteGrise\n{\n    private int $id;\n\n    public function __construct(\n        Voiture $voiture,\n        private string $immatriculation,\n        private string $proprietaire,\n        private string $adresse,\n    ) {}\n}\n</code></pre> <p>^ probl\u00e8me : r\u00e9f\u00e9rence circulaire, transition probl\u00e8me de m\u00e9moire</p> <pre><code>use Doctrine\\ORM\\EntityManagerInterface;\n\nfunction (EntityManagerInterface $manager) {\n    $entities = $manager\n        -&gt;getRepository(Voiture::class)\n        -&gt;findAll();\n}\n</code></pre> <p>^ probl\u00e8me : fuite m\u00e9moire</p> <p>[.code-highlight: 7-12]</p> <pre><code>use Doctrine\\ORM\\EntityManagerInterface;\n\nfunction (EntityManagerInterface $manager) {\n    $repository = $manager-&gt;getRepository(Voiture::class);\n    $count = $repository-&gt;count();\n\n    for ($offset = 0; $offset &lt; $count; $offset += 100) {\n        $entities = $repository-&gt;findBy(\n            limit: 100,\n            offset: $offset,\n        );\n    }\n}\n</code></pre> <p>^ probl\u00e8me : fuite m\u00e9moire</p> <p>[.code-highlight: 8]</p> <pre><code>use Doctrine\\ORM\\EntityManagerInterface;\n\nfunction (EntityManagerInterface $manager) {\n    $repository = $manager-&gt;getRepository(Voiture::class);\n    $count = $repository-&gt;count();\n\n    for ($offset = 0; $offset &lt; $count; $offset += 100) {\n        $manager-&gt;clear();\n        $entities = $repository-&gt;findBy(\n            limit: 100,\n            offset: $offset,\n        );\n    }\n}\n</code></pre> <p>^ probl\u00e8me : g\u00e9rer localement un \u00e9tat global</p> <p>^ \"Ces probl\u00e8mes, et il en existe d'autres, sont inextricables du design des orms actuels. Et si on repensait ce design ?\"</p>"},{"location":"conferences/orm/slides/#arrive-formal","title":"Arrive Formal !","text":"<p>^ ORM orient\u00e9 DDD</p> <pre><code>composer require formal/orm\n</code></pre> <pre><code>use Formal\\ORM\\Id;\n\nfinal readonly class Voiture\n{\n    /** @param Id&lt;self&gt; $id */\n    public function __construct(\n        private Id $id,\n        private CarteGrise $carteGrise,\n    ) {}\n}\n</code></pre> <pre><code>final readonly class CarteGrise\n{\n    public function __construct(\n        private string $immatriculation,\n        private string $proprietaire,\n        private string $adresse,\n    ) {}\n}\n</code></pre> <p>^ Immuable</p> <pre><code>$carteGrise = new CarteGrise('aa-123-bb', 'John Doe', 'Somewhereville');\n$voiture1 = new Voiture(\n    Id::new(Voiture::class),\n    $carteGrise,\n);\n$voiture2 = new Voiture(\n    Id::new(Voiture::class),\n    $carteGrise,\n);\n</code></pre> <p>^ 2 cartes persist\u00e9es, rend explicite la n\u00e9cessit\u00e9 d'ajouter une v\u00e9rification</p> <p>[.code-highlight: 1-3, 6-7]</p> <pre><code>$repository = $manager-&gt;repository(Voiture::class);\n$manager-&gt;transactional(\n    static function() use ($repository) {\n        $voiture1 = ...;\n        $voiture2 = ...;\n        $repository-&gt;put($voiture1);\n        $repository-&gt;put($voiture2);\n\n        return Either::right(new SideEffect);\n    },\n);\n</code></pre> <p>^ transaction permet de faire les appels sql directement</p> <p>[.code-highlight: 5-6]</p> <pre><code>$repository = $manager-&gt;repository(Voiture::class);\n$manager-&gt;transactional(\n    static function() use ($repository) {\n        $voiture = ...;\n        $voiture = $voiture-&gt;changerAdresse('nouvelle adresse');\n        $repository-&gt;put($voiture);\n\n        return Either::right(new SideEffect);\n    },\n);\n</code></pre> <p>^ update explicite emp\u00eache update accidentel, \u00e9tat local donc \"entity manager closed\" impossible</p> <pre><code>$manager\n    -&gt;repository(Voiture::class)\n    -&gt;all()\n    -&gt;foreach(static fn(Voiture $voiture) =&gt; doSomething($voiture));\n</code></pre> <p>^ Lazy + memory safe</p> <p>[.code-highlight: 4-5]</p> <pre><code>$manager\n    -&gt;repository(Voiture::class)\n    -&gt;all()\n    -&gt;drop(1_000)\n    -&gt;take(100)\n    -&gt;foreach(static fn(Voiture $voiture) =&gt; doSomething($voiture));\n</code></pre> <p>^ blague que c'est la slide de la config, intro sur les avantages</p>"},{"location":"conferences/orm/slides/#surete","title":"Suret\u00e9","text":"<p>^ m\u00e9moire, impossible de mal l'utiliser</p>"},{"location":"conferences/orm/slides/#no-sql","title":"No SQL","text":"<p>[.code-highlight: 8-12]</p> <pre><code>use Formal\\ORM\\Specification\\Entity;\nuse Innmind\\Specification\\Property;\nuse Innmind\\Specification\\Sign;\n\n$manager\n    -&gt;repository(Voiture::class)\n    -&gt;matching(\n        Entity::of('carteGrise', Property::of(\n            'immatriculation',\n            Sign::equality,\n            'aa-123-bb',\n        )),\n    )\n    -&gt;foreach(static fn(Voiture $voiture) =&gt; doSomething($voiture));\n</code></pre>"},{"location":"conferences/orm/slides/#stockage","title":"Stockage","text":"<p>[.list: alignment(left)]</p> <ul> <li>SQL (Mysql, MariaDB et PostgreSQL)</li> </ul> <p>^ \u00e7a c'est attendu</p> <p>[.list: alignment(left)]</p> <ul> <li>SQL (Mysql, MariaDB et PostgreSQL)</li> <li>Filesystem<ul> <li>concret</li> </ul> </li> </ul> <p>^ utile pour du prototyping ou outils CLI</p> <p>[.list: alignment(left)]</p> <ul> <li>SQL (Mysql, MariaDB et PostgreSQL)</li> <li>Filesystem<ul> <li>concret</li> <li>S3</li> </ul> </li> </ul> <p>^ utile pour prototyping en serverless, synchro d'outils CLI</p> <p>[.list: alignment(left)]</p> <ul> <li>SQL (Mysql, MariaDB et PostgreSQL)</li> <li>Filesystem<ul> <li>concret</li> <li>S3</li> <li>en m\u00e9moire</li> </ul> </li> </ul> <p>^ utile pour les tests</p> <p>[.list: alignment(left)]</p> <ul> <li>SQL (Mysql, MariaDB et PostgreSQL)</li> <li>Filesystem<ul> <li>concret</li> <li>en m\u00e9moire</li> <li>S3</li> </ul> </li> <li>Elasticsearch</li> </ul> <p></p> <p>Ils ont exactement le m\u00eame comportement</p> <p>^ R\u00e9f\u00e9rence \u00e0 la conf de 2023</p>"},{"location":"conferences/orm/slides/#ecosysteme-innmind","title":"Ecosyst\u00e8me Innmind","text":"<p>[.list: alignment(left)]</p> <ul> <li>G\u00e9n\u00e9ration de fichier</li> <li>Body requ\u00eate/r\u00e9ponse HTTP</li> <li>Input de processus</li> <li>Envoi de messages AMQP</li> <li>Asynchrone</li> </ul> <p>^ Mention qu'on g\u00e9n\u00e8re des fichiers compress\u00e9s de plusieurs Go chez Efalia</p>"},{"location":"conferences/orm/slides/#performance","title":"Performance","text":"<p>~40% plus rapide que Doctrine</p> <p></p>"},{"location":"conferences/orm/slides/#et-plus","title":"Et plus","text":""},{"location":"conferences/orm/slides/#questions","title":"Questions","text":"<p>Twitter @Baptouuuu</p> <p>https://baptouuuu.github.io/talks/</p>"},{"location":"conferences/retex%20archivage/slides/","title":"Slides","text":""},{"location":"conferences/retex%20archivage/slides/#archiver-efficacement-de-grands-volumes-de-donnees-grace-aux-monades","title":"Archiver efficacement de grands volumes de donn\u00e9es gr\u00e2ce aux monades","text":"<p>[.list: alignment(left)]</p> <ul> <li>Baptiste Langlade</li> <li>Lyon</li> <li>10+ ans XP</li> <li>~100 packages Open Source</li> </ul> <p></p>"},{"location":"conferences/retex%20archivage/slides/#ged","title":"GED","text":"<p>^ on premise =&gt; interventions difficiles</p> <p>[.list: alignment(left)]</p> <ul> <li>Documents<ul> <li>M\u00e9tadonn\u00e9es</li> <li>1..N binaires</li> </ul> </li> </ul> <p>^ utiliser la carte d'identit\u00e9 pour expliquer les N versions</p>"},{"location":"conferences/retex%20archivage/slides/#archivage","title":"Archivage","text":"<p>^ archivage d\u00e9finies par m\u00e9tadonn\u00e9es, sur plusieurs ann\u00e9es/d\u00e9cennies</p> <p>[.list: alignment(left)]</p> <ul> <li>Archive<ul> <li>CSV des documents</li> <li>Dossiers contenant les binaires</li> </ul> </li> </ul> <p>^ en 1 seul fichier</p>"},{"location":"conferences/retex%20archivage/slides/#contraintes","title":"Contraintes","text":"<p>^ taille archive, intervention impossible</p>"},{"location":"conferences/retex%20archivage/slides/#comment-on-fait","title":"Comment on fait ?","text":""},{"location":"conferences/retex%20archivage/slides/#streaming-de-donnees","title":"Streaming de donn\u00e9es","text":"<pre><code>$file = \\fopen('names.txt', 'r');\n\nwhile ($line = \\fgets($file)) {\n    echo $line;\n}\n</code></pre> <p>[.code-highlight: 1] [.code-highlight: 2] [.code-highlight: 3] [.code-highlight: 4]</p> <pre><code>alice\nbob\njane\njohn\netc...\n</code></pre> <p>[.code-highlight: 1-8] [.code-highlight: 6]</p> <pre><code>/** @var \\Generator&lt;string&gt; */\n$stream = function(): \\Generator {\n    $file = \\fopen('names.txt', 'r');\n\n    while ($line = \\fgets($file)) {\n        yield $line;\n    }\n};\n</code></pre> <pre><code>foreach ($stream() as $line) {\n    echo $line;\n}\n</code></pre> <p>[.code-highlight: 1] [.code-highlight: 2] [.code-highlight: 3] [.code-highlight: 4]</p> <pre><code>alice\nbob\njane\njohn\netc...\n</code></pre> <p>^ important avoir une seule variable en m\u00e9moire</p> <pre><code>flowchart LR\n    Generator --&gt; foreach\n</code></pre> <pre><code>flowchart LR\n    Generator --&gt; Logic --&gt; foreach\n</code></pre> <pre><code>/**\n * @param callable(): \\Generator&lt;string&gt; $stream\n * @var \\Generator&lt;string&gt;\n */\n$trim = function(callable $stream): \\Generator {\n    foreach ($stream() as $line) {\n        yield \\rtrim($line, \"\\n\");\n    }\n};\n</code></pre> <pre><code>foreach ($trim($stream) as $line) {\n    echo $line.\",\\n\";\n}\n</code></pre> <p>[.code-highlight: 7]</p> <pre><code>/**\n * @param callable(): \\Generator&lt;string&gt; $stream\n * @var \\Generator&lt;string&gt;\n */\n$trim = function(callable $stream): \\Generator {\n    foreach ($stream() as $line) {\n        yield \\rtrim($line, \"\\n\");\n    }\n};\n</code></pre> <pre><code>foreach ($hello($capitalize($trim($stream))) as $line) {\n    echo $line.\",\\n\";\n}\n</code></pre>"},{"location":"conferences/retex%20archivage/slides/#monades","title":"Monades","text":"<pre><code>composer require innmind/immutable\n</code></pre> <pre><code>use Innmind\\Immutable\\Sequence;\n\n/** @var Sequence&lt;string&gt; */\n$stream = Sequence::lazy(function() {\n    $file = \\fopen('names.txt', 'r');\n\n    while ($line = \\fgets($file)) {\n        yield $line;\n    }\n});\n</code></pre> <pre><code>$stream-&gt;foreach(function(string $line) {\n    echo $line;\n});\n</code></pre> <p>[.code-highlight: 1-2] [.code-highlight: 3-5]</p> <pre><code>/** @var Sequence&lt;string&gt; */\n$trimmed = $stream-&gt;map(fn(string $line) =&gt; \\rtrim($line, \"\\n\"));\n$trimmed-&gt;foreach(function(string $line) {\n    echo $line.\",\\n\";\n});\n</code></pre> <code>-&gt;map()</code> <code>-&gt;flatMap()</code> <code>-&gt;add()</code> <code>-&gt;append()</code> <code>-&gt;filter()</code> <code>-&gt;aggregate()</code> <code>-&gt;zip()</code> etc... <p>^ pause</p>"},{"location":"conferences/retex%20archivage/slides/#style-monadique","title":"Style monadique","text":"<p>^ le jeu est de tout repr\u00e9senter via des Sequence</p> <p>[.list: alignment(left)]</p>"},{"location":"conferences/retex%20archivage/slides/#cas-dusage","title":"Cas d'usage","text":"<ul> <li>SQL</li> <li>Filesystem</li> </ul>"},{"location":"conferences/retex%20archivage/slides/#sql","title":"SQL","text":"<pre><code>/** @var Sequence&lt;array&gt; */\n$rows = function(string $query): Sequence {};\n</code></pre>"},{"location":"conferences/retex%20archivage/slides/#orm","title":"ORM","text":"<pre><code>/** @var Sequence&lt;Entity&gt; */\n$entities = function(): Sequence {};\n</code></pre> <pre><code>composer require formal/orm\n</code></pre> <pre><code>/** @var Sequence&lt;Document&gt; */\n$documents = $orm\n    -&gt;repository(Document::class)\n    -&gt;all()\n    -&gt;sequence();\n</code></pre>"},{"location":"conferences/retex%20archivage/slides/#fichier","title":"Fichier","text":"<pre><code>final class File\n{\n    public function __construct(\n        private string $name,\n        /** @var Sequence&lt;string&gt; */\n        private Sequence $content,\n    ) {}\n}\n</code></pre>"},{"location":"conferences/retex%20archivage/slides/#dossier","title":"Dossier","text":"<pre><code>final class Directory\n{\n    public function __construct(\n        private string $name,\n        /** @var Sequence&lt;File|Directory&gt; */\n        private Sequence $content,\n    ) {}\n}\n</code></pre> <pre><code>composer require innmind/filesystem\n</code></pre> <pre><code>use Innmind\\Filesystem\\File;\nuse Innmind\\Filesystem\\File\\Content;\nuse Innmind\\Immutable\\Sequence;\nuse Innmind\\Immutable\\Str;\n\n$file = File::named(\n    'data.csv',\n    Content::ofChunks(\n        Sequence::lazy(fn() =&gt; yield from [\n            \"line, 1\\n\",\n            \"line, 2\\n\",\n            \"etc...\",\n        ]),\n    ),\n);\n</code></pre> <pre><code>use Innmind\\Filesystem\\Directory;\n\n$directory = Directory::named(\n    'files',\n    Sequence::lazy(fn() =&gt; yield from [\n        File::named('something', $content),\n        Directory::named(...$args),\n        // etc...\n    ]),\n);\n</code></pre> <p>^ pause</p> <p>[.list: alignment(left)]</p>"},{"location":"conferences/retex%20archivage/slides/#cas-dusage_1","title":"Cas d'usage","text":"<ul> <li>Archive<ul> <li>CSV des documents</li> <li>Dossiers contenant les binaires</li> </ul> </li> </ul> <p>[.code-highlight: 1] [.code-highlight: 2] [.code-highlight: 3-9] [.code-highlight: 8] [.code-highlight: 1-10]</p> <pre><code>$csv = File::named(\n    'documents.csv',\n    Content::ofChunks(\n        $orm\n            -&gt;repository(Document::class)\n            -&gt;all()\n            -&gt;sequence()\n            -&gt;map(fn(Document $document): string =&gt; $document-&gt;toCsvLine()),\n    ),\n);\n</code></pre> <p>[.code-highlight: 6-12] [.code-highlight: 7] [.code-highlight: 8] [.code-highlight: 9] [.code-highlight: 6]</p> <pre><code>use Innmind\\Filesystem\\Adapter\\Filesystem;\nuse Innmind\\Filesystem\\Name;\nuse Innmind\\Url\\Path;\nuse Innmind\\Immutable\\Predicate\\Instance;\n\n$fetch = function(Document $document): Directory {\n    return Filesystem::mount(Path::of('var/data/'))\n        -&gt;get(Name::of($document-&gt;id()-&gt;toString()))\n        -&gt;keep(Instance::of(Directory::class));\n};\n</code></pre> <pre><code>$binaires = Directory::named(\n    'binaires',\n    $orm\n        -&gt;repository(Document::class)\n        -&gt;all()\n        -&gt;sequence()\n        -&gt;map($fetch),\n);\n</code></pre> <pre><code>$archive = Directory::named(\n    'archive',\n    Sequence::lazy(fn() =&gt; yield from [\n        $csv,\n        $binaires,\n    ]),\n);\n</code></pre>"},{"location":"conferences/retex%20archivage/slides/#tar","title":"Tar","text":"<p>[.code-highlight: 1-3] [.code-highlight: 4-5] [.code-highlight: 6-7]</p> <pre><code>directory/file.txt\nline 1\nline 2\ndirectory/image.png\nbinary\ndirectory/sub/file.ext\ncontent\n</code></pre> <pre><code>composer require innmind/encoding\n</code></pre> <p>[.code-highlight: 1-3] [.code-highlight: 7-8]</p> <pre><code>use Innmind\\Encoding\\Tar;\n\n$tar = Tar::encode();\n\n$archive = Directory::named(...$args);\n\n/** @var \\Innmind\\Filesystem\\File\\Content */\n$archive = $tar($archive);\n</code></pre> <pre><code>$documents = fetchDocuments($orm);\n$archive = Directory::named(\n    'archive',\n    Sequence::lazy(fn() =&gt; yield from [\n        toCsv($documents),\n        binaires($documents),\n    ]),\n);\n$archive = $tar($archive);\n</code></pre> <p>^ aucun traitement effectu\u00e9 pour l'instant</p> <pre><code>use Symfony\\Component\\HttpFoundation\\StreamedResponse;\n\nnew StreamedResponse(\n    fn() =&gt; $archive\n        -&gt;chunks()\n        -&gt;foreach(function(string $chunk) {\n            echo $chunk;\n            \\flush();\n        });\n);\n</code></pre> <p>[.code-highlight: 1] [.code-highlight: 2] [.code-highlight: 3] [.code-highlight: 4] [.code-highlight: 5] [.code-highlight: 6] [.code-highlight: 7] [.code-highlight: 8-9]</p> <pre><code>archive/documents.csv\ndocument 1, m\u00e9tadonn\u00e9e, etc...\ndocument 2, m\u00e9tadonn\u00e9e, etc...\narchive/binaires/uuid-document-1/v1.bin\nbinaire chunk 1\nbinaire chunk 2\netc...\narchive/binaires/uuid-document-2/v1.bin\nbinaire\n</code></pre>"},{"location":"conferences/retex%20archivage/slides/#demo","title":"Demo","text":"<p>[.list: alignment(left)]</p>"},{"location":"conferences/retex%20archivage/slides/#statistiques","title":"Statistiques","text":"<ul> <li>100k documents</li> <li>~80Go</li> <li>~45 minutes</li> <li>~45Mo/s</li> <li>~40Mo de RAM</li> <li>~100 lignes de code</li> </ul>"},{"location":"conferences/retex%20archivage/slides/#stateless","title":"Stateless","text":""},{"location":"conferences/retex%20archivage/slides/#httpsinnmindorg","title":"https://innmind.org","text":""},{"location":"conferences/retex%20archivage/slides/#questions","title":"Questions","text":"<p>X/Bluesky/Mastodon @Baptouuuu</p> <p>https://baptouuuu.github.io/conferences/</p>"},{"location":"conferences/retex%20archivage/demo/","title":"Index","text":"<p>Installez les vendors avec :</p> <pre><code>composer install\n</code></pre> <p>Pour g\u00e9n\u00e9rer les documents :</p> <pre><code>php generate-docs.php\n</code></pre> <p>Pour g\u00e9n\u00e9rer l'archive :</p> <pre><code>php archive.php\n</code></pre> <p>Vous pouvez suivre l'avancement de la g\u00e9n\u00e9ration de l'archive via :</p> <pre><code>ls -goh var/ | grep tar\n</code></pre>"},{"location":"conferences/retex%20blackbox/slides/","title":"Slides","text":""},{"location":"conferences/retex%20blackbox/slides/#augmentez-votre-couverture","title":"Augmentez votre couverture :","text":""},{"location":"conferences/retex%20blackbox/slides/#supprimez-des-tests","title":"supprimez des tests !","text":"<p>[.list: alignment(left)]</p> <ul> <li>Baptiste Langlade</li> <li>Lyon</li> <li>10+ ans XP</li> <li>~95 packages Open Source</li> </ul> <p></p> <p>^ Efalia Suite</p>"},{"location":"conferences/retex%20blackbox/slides/#ged","title":"GED","text":"<p>[.list: alignment(left)]</p> <ul> <li>Armoires<ul> <li>Gabarits de documents<ul> <li>Documents</li> </ul> </li> </ul> </li> <li>Bannettes<ul> <li>Documents</li> </ul> </li> </ul>"},{"location":"conferences/retex%20blackbox/slides/#tests-fonctionnels","title":"Tests fonctionnels","text":"<p>^ 3 devs, d\u00e9ploiement on premise, symfony</p> <p>[.list: alignment(left)]</p> <ul> <li>Armoires<ul> <li>Gabarits de documents<ul> <li>Documents</li> </ul> </li> </ul> </li> <li>Bannettes<ul> <li>Documents</li> </ul> </li> </ul> <p>^ Tests positifs + n\u00e9gatifs, fonctionnalit\u00e9 verrouillage</p>"},{"location":"conferences/retex%20blackbox/slides/#verrouiller-document","title":"Verrouiller document","text":"<p>[.list: alignment(left)]</p> <ul> <li>Armoires<ul> <li>Gabarits de documents<ul> <li>Documents</li> </ul> </li> <li>Gabarits de dossiers<ul> <li>Dossiers &gt; Gabarits de documents &gt; Documents</li> </ul> </li> </ul> </li> <li>Bannettes<ul> <li>Documents</li> </ul> </li> </ul>"},{"location":"conferences/retex%20blackbox/slides/#verrouiller-document_1","title":"Verrouiller document","text":"<p>[.list: alignment(left)]</p>"},{"location":"conferences/retex%20blackbox/slides/#apres-3-ans","title":"Apr\u00e8s 3 ans","text":"<ul> <li>730 tests (350 positifs, 380 n\u00e9gatifs)</li> <li>1h15 de temps d'ex\u00e9cution</li> </ul>"},{"location":"conferences/retex%20blackbox/slides/#complexite-exponentielle","title":"Complexit\u00e9 Exponentielle","text":"<p>^ Soit on abandonne soit on trouve un nouvel outil</p>"},{"location":"conferences/retex%20blackbox/slides/#property-based-testing","title":"Property Based Testing","text":"<p>^ Programmation fonctionnelle, al\u00e9atoire</p>"},{"location":"conferences/retex%20blackbox/slides/#loi-de-murphy","title":"Loi de Murphy","text":"<p>^ Loi statistique</p>"},{"location":"conferences/retex%20blackbox/slides/#tests-locaux-ci","title":"Tests locaux &amp; CI","text":"<p>^ Au plus on lance les tests au plus le syst\u00e8me est efficace</p>"},{"location":"conferences/retex%20blackbox/slides/#tests-en-dur","title":"Tests en dur","text":"<pre><code>final class ArmoireTest extends TestCase\n{\n    public function testCreationArmoire()\n    {\n        $response = $this-&gt;makePost('/api/armoires', [\n            'nom' =&gt; 'foobar',\n        ]);\n\n        $this-&gt;assertSame(201, $response-&gt;getStatusCode());\n    }\n}\n</code></pre> <p>[.code-highlight: 5-10] [.code-highlight: 12-16] [.code-highlight: 5-10]</p> <pre><code>final class GabaritDeDocumentTest extends TestCase\n{\n    public function testCreationGabaritDeDocument()\n    {\n        $response = $this-&gt;makePost('/api/armoires', [\n            'nom' =&gt; 'foobar',\n        ]);\n\n        $this-&gt;assertSame(201, $response-&gt;getStatusCode());\n        $armoire = \\json_decode($response-&gt;getContent(), true);\n\n        $response = $this-&gt;makePost(\"/api/armoires/{$armoire['id']}/gabarits-de-documents\", [\n            'nom' =&gt; 'baz',\n        ]);\n\n        $this-&gt;assertSame(201, $response-&gt;getStatusCode());\n    }\n}\n</code></pre> <p>[.code-highlight: 5]</p> <pre><code>final class GabaritDeDocumentTest extends TestCase\n{\n    public function testCreationGabaritDeDocument()\n    {\n        $armoire = $this-&gt;creerArmoire('foobar');\n\n        $response = $this-&gt;makePost(\"/api/armoires/{$armoire['id']}/gabarits-de-documents\", [\n            'nom' =&gt; 'baz',\n        ]);\n\n        $this-&gt;assertSame(201, $response-&gt;getStatusCode());\n    }\n}\n</code></pre>"},{"location":"conferences/retex%20blackbox/slides/#donnees-aleatoires","title":"Donn\u00e9es al\u00e9atoires","text":"<pre><code>composer require --dev innmind/black-box\n</code></pre> <p>[.code-highlight: 5] [.code-highlight: 10] [.code-highlight: 11] [.code-highlight: 13]</p> <pre><code>use Innmind\\BlackBox\\{PHPUnit\\BlackBox, Set};\n\nfinal class ArmoireTest extends TestCase\n{\n    use BlackBox;\n\n    public function testCreationArmoire()\n    {\n        $this\n            -&gt;forAll(Set\\Elements::of('foobar'))\n            -&gt;then(function(string $nom) {\n                $response = $this-&gt;makePost('/api/armoires', [\n                    'nom' =&gt; $nom,\n                ]);\n\n                $this-&gt;assertSame(201, $response-&gt;getStatusCode());\n            });\n    }\n}\n</code></pre> <p>Pour toute string entre 1 et 255 caract\u00e8res alors je peux cr\u00e9er une armoire</p> <p>[.code-highlight: 8] [.code-highlight: 9] [.code-highlight: 11]</p> <pre><code>final class ArmoireTest extends TestCase\n{\n    use BlackBox;\n\n    public function testCreationArmoire()\n    {\n        $this\n            -&gt;forAll(Set\\Strings::between(1, 255))\n            -&gt;then(function(string $nom) {\n                $response = $this-&gt;makePost('/api/armoires', [\n                    'nom' =&gt; $nom,\n                ]);\n\n                $this-&gt;assertSame(201, $response-&gt;getStatusCode());\n            });\n    }\n}\n</code></pre> <p>^ elasticsearch</p> <p>[.code-highlight: 13] [.code-highlight: 15-19] [.code-highlight: 12] [.code-highlight: 9-10]</p> <pre><code>final class GabaritDeDocumentTest extends TestCase\n{\n    use BlackBox;\n\n    public function testCreationGabaritDeDocument()\n    {\n        $this\n            -&gt;forAll(\n                Set\\Strings::between(1, 255),\n                Set\\Strings::between(1, 255),\n            )\n            -&gt;then(function(string $nomArmoire, string $nomGabarit) {\n                $armoire = $this-&gt;creerArmoire($nomArmoire);\n\n                $response = $this-&gt;makePost(\"/api/armoires/{$armoire['id']}/gabarits-de-documents\", [\n                    'nom' =&gt; $nomGabarit,\n                ]);\n\n                $this-&gt;assertSame(201, $response-&gt;getStatusCode());\n            });\n    }\n}\n</code></pre> <p>^ Double probl\u00e8me, cr\u00e9ation armoire et g\u00e9n\u00e9ration du nom dupliqu\u00e9e</p>"},{"location":"conferences/retex%20blackbox/slides/#tests-dynamiques","title":"Tests dynamiques","text":"<p>[.code-highlight: 1] [.code-highlight: 16-21] [.code-highlight: 3] [.code-highlight: 5] [.code-highlight: 7-11] [.code-highlight: 13]</p> <pre><code>final class CreerArmoire\n{\n    public function __construct(private string $nom) {}\n\n    public function __invoke(TestCase $test): array\n    {\n        $response = $test-&gt;makePost('/api/armoires', [\n            'nom' =&gt; $this-&gt;nom,\n        ]);\n\n        $test-&gt;assertSame(201, $response-&gt;getStatusCode());\n\n        return \\json_decode($response-&gt;getContent(), true);\n    }\n\n    public static function any(): Set\n    {\n        return Set\\Strings::between(1, 255)-&gt;map(\n            static fn($nom) =&gt; new self($nom),\n        );\n    }\n}\n</code></pre> <p>[.code-highlight: 8] [.code-highlight: 9] [.code-highlight: 10]</p> <pre><code>final class ArmoireTest extends TestCase\n{\n    use BlackBox;\n\n    public function testCreationArmoire()\n    {\n        $this\n            -&gt;forAll(CreerArmoire::any())\n            -&gt;then(function(CreerArmoire $creerArmoire) {\n                $creerArmoire($this);\n            });\n    }\n}\n</code></pre> <p>[.code-highlight: 9] [.code-highlight: 12] [.code-highlight: 13]</p> <pre><code>final class GabaritDeDocumentTest extends TestCase\n{\n    use BlackBox;\n\n    public function testCreationGabaritDeDocument()\n    {\n        $this\n            -&gt;forAll(\n                CreerArmoire::any(),\n                Set\\Strings::between(1, 255),\n            )\n            -&gt;then(function(CreerArmoire $creerArmoire, string $nomGabarit) {\n                $armoire = $creerArmoire($this);\n\n                $response = $this-&gt;makePost(\"/api/armoires/{$armoire['id']}/gabarits-de-documents\", [\n                    'nom' =&gt; $nomGabarit,\n                ]);\n\n                $this-&gt;assertSame(201, $response-&gt;getStatusCode());\n            });\n    }\n}\n</code></pre> <p>[.list: alignment(left)]</p> <ul> <li><code>CreerArmoire</code></li> <li><code>CreerGabaritDeDocument</code></li> <li><code>CreerDocumentDansArmoire</code></li> <li><code>CreerBannette</code></li> <li><code>CreerDocumentDansBannette</code></li> </ul> <p>[.list: alignment(left)]</p> <p><code>VerrouillerDocument</code></p> <ul> <li><code>CreerDocumentDansArmoire</code></li> <li><code>CreerDocumentDansBannette</code></li> </ul> <p>[.code-highlight: 1] [.code-highlight: 14-16] [.code-highlight: 17] [.code-highlight: 3] [.code-highlight: 7] [.code-highlight: 14-16]</p> <pre><code>final class VerrouillerDocument\n{\n    public function __construct(private $creerDocument) {}\n\n    public function __invoke(TestCase $test)\n    {\n        $document = ($this-&gt;creerDocument)($test);\n\n        // reste du test\n    }\n\n    public static function any(): Set\n    {\n        return Set\\Either::any(\n            CreerDocumentDansArmoire::any(),\n            CreerDocumentDansBannette::any(),\n        )-&gt;map(static fn($creerDocument) =&gt; new self($creerDocument));\n    }\n}\n</code></pre> <pre><code>namespace Fixtures;\n\nfinal class Document\n{\n    public static function any(): Set\n    {\n        return Set\\Either::any(\n            CreerDocumentDansArmoire::any(),\n            CreerDocumentDansBannette::any(),\n        );\n    }\n}\n</code></pre> <p>[.code-highlight: 10-15]</p> <pre><code>final class VerrouillerDocument\n{\n    public function __construct(private $creerDocument) {}\n\n    public function __invoke(TestCase $test)\n    {\n        // impl\u00e9mentation\n    }\n\n    public static function any(): Set\n    {\n        return \\Fixtures\\Document::any()-&gt;map(\n            static fn($creerDocument) =&gt; new self($creerDocument),\n        );\n    }\n}\n</code></pre> <p>[.code-highlight: 10]</p> <pre><code>namespace Fixtures;\n\nfinal class Document\n{\n    public static function any(): Set\n    {\n        return Set\\Either::any(\n            CreerDocumentDansArmoire::any(),\n            CreerDocumentDansBannette::any(),\n            CreerDocumentDansDossier::any(),\n        );\n    }\n}\n</code></pre> <p></p> <p></p>"},{"location":"conferences/retex%20blackbox/slides/#test-non-regression","title":"Test non r\u00e9gression","text":"<pre><code>final class ArmoireTest extends TestCase\n{\n    public function testNonRegression()\n    {\n        $creerArmoire = new CreerArmoire('nom invalide');\n\n        $creerArmoire($this);\n    }\n}\n</code></pre> <p>[.list: alignment(left)]</p>"},{"location":"conferences/retex%20blackbox/slides/#composition","title":"Composition","text":"<ul> <li><code>Set\\Strings::madeOf(...Set)</code></li> <li><code>Set-&gt;filter()</code></li> <li><code>Set\\Composite(callable, ...Set)</code></li> <li>etc...</li> </ul>"},{"location":"conferences/retex%20blackbox/slides/#futur","title":"Futur","text":""},{"location":"conferences/retex%20blackbox/slides/#parcours-utilisateur","title":"Parcours utilisateur","text":"<p>[.code-highlight: 8,14] [.code-highlight: 9-13] [.code-highlight: 15-19]</p> <pre><code>final class SimulationTest extends TestCase\n{\n    use BlackBox;\n\n    public function testParcoursUtilisateur()\n    {\n        $this\n            -&gt;forAll(Set\\Sequence::of(\n                Set\\Either::any(\n                    CreerDocumentDansArmoire::any(),\n                    CreerBannette::any(),\n                    // etc...\n                ),\n            )-&gt;atLeast(2))\n            -&gt;then(function(array $actions) {\n                foreach ($actions as $action) {\n                    $action($this);\n                }\n            });\n    }\n}\n</code></pre>"},{"location":"conferences/retex%20blackbox/slides/#tests-en-conditions-reelles","title":"Tests en conditions r\u00e9elles","text":"<p>^ Efalia Suite</p> <p>[.code-highlight: 7-9]</p> <pre><code>final class CreerArmoire\n{\n    public function __construct(private string $nom) {}\n\n    public function __invoke(TestCase $test): array\n    {\n        $response = $test-&gt;makePost('/api/armoires', [\n            'nom' =&gt; $this-&gt;nom,\n        ]);\n\n        $test-&gt;assertSame(201, $response-&gt;getStatusCode());\n\n        return \\json_decode($response-&gt;getContent(), true);\n    }\n\n    public static function any(): Set\n    {\n        return Set\\Strings::between(1, 255)-&gt;map(\n            static fn($nom) =&gt; new self($nom),\n        );\n    }\n}\n</code></pre> <p>^ Client HTTP</p>"},{"location":"conferences/retex%20blackbox/slides/#model-checker","title":"Model Checker","text":"<p>^ TLA+ / Alloy</p>"},{"location":"conferences/retex%20blackbox/slides/#_1","title":"\ud83e\udd2b","text":""},{"location":"conferences/retex%20blackbox/slides/#questions","title":"Questions","text":"<p>Twitter @Baptouuuu</p> <p>Github @Baptouuuu/talks</p>"},{"location":"conferences/time%20dependency/plugin/markdown/example/","title":"Markdown Demo","text":""},{"location":"conferences/time%20dependency/plugin/markdown/example/#external-11","title":"External 1.1","text":"<p>Content 1.1</p> <p>Note: This will only appear in the speaker notes window.</p>"},{"location":"conferences/time%20dependency/plugin/markdown/example/#external-12","title":"External 1.2","text":"<p>Content 1.2</p>"},{"location":"conferences/time%20dependency/plugin/markdown/example/#external-2","title":"External 2","text":"<p>Content 2.1</p>"},{"location":"conferences/time%20dependency/plugin/markdown/example/#external-31","title":"External 3.1","text":"<p>Content 3.1</p>"},{"location":"conferences/time%20dependency/plugin/markdown/example/#external-32","title":"External 3.2","text":"<p>Content 3.2</p>"},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2014/","title":"2014","text":""},{"location":"blog/category/archives/","title":"archives","text":""},{"location":"blog/category/git/","title":"git","text":""},{"location":"blog/category/javascript/","title":"javascript","text":""}]}